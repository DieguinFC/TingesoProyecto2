
services:
  eureka-server:
    container_name: eureka-server
    image: my-eureka-server:latest 
    ports:
      - "8761:8761"
    environment:
      - EUREKA_SERVER=true
    networks:
      - microservices-network
    deploy:
      restart_policy:
        condition: on-failure

  config-server:
    container_name: config-server
    build:
      context: ./Back/config-service/config-service  # Ruta al Dockerfile de config-server
    image: shezy1/config-server:latest
    ports:
      - "8888:8888"  # Puerto donde se expone el Config Server
    environment:
      - SPRING_PROFILES_ACTIVE=native
    networks:
      - microservices-network
    depends_on:
      - postgres-ms2
      - postgres-ms3
    deploy:
      restart_policy:
        condition: on-failure

  microservice1:
    container_name: microservice1
    build:
      context: ./Back/microservice1/microservice1  # Ruta al Dockerfile de MS1
    image: shezy1/microservice1:latest
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=default
    depends_on:
      - eureka-server
      - config-server
    networks:
      - microservices-network
    deploy:
      restart_policy:
        condition: on-failure

  microservice2:
    container_name: microservice2
    build:
      context: ./Back/microservice2/microservice2  # Ruta al Dockerfile de MS2
    image: shezy1/microservice2:latest
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=default
    depends_on:
      - eureka-server
      - config-server
    networks:
      - microservices-network
    deploy:
      restart_policy:
        condition: on-failure

  microservice3:
    container_name: microservice3
    build:
      context: ./Back/microservice3/microservice3  # Ruta al Dockerfile de MS3
    image: shezy1/microservice3:latest
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=default
    depends_on:
      - eureka-server
      - config-server
    networks:
      - microservices-network
    deploy:
      restart_policy:
        condition: on-failure

  api-gateway:
    container_name: api-gateway
    build:
      context: ./Back/api-gateway/api-gateway  # Ruta al Dockerfile del API Gateway
    image: shezy1/api-gateway:latest
    ports:
      - "8080:8080"  # El puerto del API Gateway
    environment:
      - SPRING_PROFILES_ACTIVE=default
    depends_on:
      - eureka-server
      - microservice1
      - microservice2
      - microservice3
    networks:
      - microservices-network
    deploy:
      restart_policy:
        condition: on-failure

  frontend:
    container_name: frontend
    build:
      context: ./Front  # Ruta al Dockerfile del frontend
    image: shezy1/frontend:latest
    ports:
      - "5173:80"  # Expone el frontend en el puerto 5173
    networks:
      - microservices-network
    deploy:
      restart_policy:
        condition: on-failure

  # PostgreSQL para MS2
  postgres-ms2:
    container_name: postgres-ms2
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: Banco  # Base de datos para MS2
    ports:
      - "5433:5432"  # Expone un puerto diferente para evitar conflicto
    volumes:
      - postgres_data_ms2:/var/lib/postgresql/data
    networks:
      - microservices-network
    deploy:
      restart_policy:
        condition: on-failure

  # PostgreSQL para MS3
  postgres-ms3:
    container_name: postgres-ms3
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: Banco3  # Base de datos para MS3
    ports:
      - "5434:5432"  # Expone un puerto diferente para evitar conflicto
    volumes:
      - postgres_data_ms3:/var/lib/postgresql/data
    networks:
      - microservices-network
    deploy:
      restart_policy:
        condition: on-failure

volumes:
  postgres_data_ms2:
  postgres_data_ms3: 

networks:
  microservices-network:
    driver: bridge
